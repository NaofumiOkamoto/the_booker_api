version: '3'

services:
  # selenium:               # selenium container
  #   # image: selenium/standalone-chrome:latest # docker hubのselenium公式イメージ
  #   image: seleniarm/standalone-chromium:latest # docker hubのselenium公式イメージ
  #   container_name: selenium
  #   shm_size: 2gb         # ホストとメモリを共有するために設定
  #   ports:
  #     - 4444:4444         # selenium sever port
  #     - 7900:7900         # 実行中のChromeを確認するVNC用port
  #   networks:
  #     - app-net
  
  python:                 # python container
    build: ./py_context   # python3のbuild contextを指定
    container_name: python
    environment:
      FLASK_APP: /app/app.py
      DB_USER: root
      DB_PASSWORD: root
      DB_HOST: db
      DB_NAME: booker
    ports:
      - "5001:5000"
    volumes: 
      # - ./work:/work      # ローカルの"./work"とコンテナの"/work"をバインド
      - ./app:/app
    tty: true             # ターミナル入力を受け付ける

    depends_on:           # seleniumコンテナの後で起動させるように指定
      - db
    # command: flask run --host=0.0.0.0 --port=5000
    command: python app.py
    networks:
      - app-net

  db:
    image: mysql
    container_name: db
    platform: linux/x86_64  # M1 Macの場合必要
    environment:
      MYSQL_DATABASE: 'booker' 
      MYSQL_ROOT_PASSWORD: root
      TZ: 'Asia/Tokyo'  # タイムゾーンを日本時間に設定
    volumes:
      - mysql_data:/var/lib/mysql
    # command: --default-authentication-plugin=mysql_native_password  # MySQL8.0ではデフォルトが"caching_sha2_password"で、ドライバが非対応のため変更
    command: --mysql_native_password=ON  # MySQL8.0ではデフォルトが"caching_sha2_password"で、ドライバが非対応のため変更
    ports:
      - 3306:3306  # ホストマシンのポート33306を、docker内のポート3306に接続する
    networks:
      - app-net
  
  # celery:
  #   build: ./py_context
  #   container_name: celery
  #   volumes:
  #     - ./app:/app
  #   environment:
  #     FLASK_APP: /app/app.py
  #     FLASK_ENV: development
  #     DB_USER: root
  #     DB_PASSWORD: root
  #     DB_HOST: db
  #     DB_NAME: booker
  #     CELERY_BROKER_URL: redis://redis:6379
  #     CELERY_RESULT_BACKEND: redis://redis:6379
  #   command: celery -A app.celery worker --loglevel=info
  #   depends_on:
  #     - redis
  #     - db
  #   networks:
  #     - app-net

  # redis:
  #   image: "redis:alpine"
  #   container_name: redis
  #   # build: ./py_context
  #   ports:
  #     - "6379:6379"
  #   networks:
  #     - app-net

  # flower:
  #   image: mher/flower:latest
  #   container_name: flower
  #   environment:
  #     CELERY_BROKER_URL: redis://redis:6379
  #     CELERY_RESULT_BACKEND: redis://redis:6379
  #   command: ['celery', '--broker=redis://redis:6379', 'flower', '--port=5555']
  #   expose:
  #     - 5555
  #   ports:
  #     - "5555:5555"
  #   depends_on:
  #     - redis
  #     - celery
  #   networks:
  #     - app-net

volumes:
  mysql_data:

networks:
  app-net:
    driver: bridge